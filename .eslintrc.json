{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/strict-type-checked",
    "prettier"
  ],
  "parserOptions": {
    // generates type information for (strict) rules that require typed linting
    "projectService": true
  },
  "rules": {
    "react/no-unescaped-entities": [
      "error",
      {
        "forbid": [">", "}"]
      }
    ],
    "spaced-comment": [
      "error",
      "always",
      { "exceptions": ["-", "*"], "markers": ["/"] }
    ],
    // we disable this because vitest needs var to hoist mock variables above imports
    "no-var": "off",
    // duplicate of @typescript-eslint/no-unused-vars
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "caughtErrorsIgnorePattern": "^e",
        "argsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        // eg: true && myFunc()
        "allowShortCircuit": true,
        "allowTernary": true
      }
    ],
    // disabled bc we prefer the simplified code from ignoring returns of void expressions
    "@typescript-eslint/no-confusing-void-expression": "off",
    // disabled bc we always want tests to be async even if they don't need it
    // in case the test is later updated to need async
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/no-misused-promises": [
      "error",
      // we prefer the simplified code from ignoring returns of void functions
      { "checksVoidReturn": false }
    ],
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      // allows numbers in grave strings: `example: ${5}`
      { "allowNumber": true }
    ],
    "@typescript-eslint/restrict-plus-operands": [
      "error",
      {
        // allows '0' + 1
        "allowNumberAndString": true
      }
    ],
    // this one seems too restrictive for little gain
    "@typescript-eslint/no-dynamic-delete": "off",
    // we use StatusCodes enums as a list of values, sometimes relationally comparing them
    // eg statusCode > 499; statusCode === StatusCodes.INTERNAL_SERVER_ERROR
    "@typescript-eslint/no-unsafe-enum-comparison": "off",
    // too many external pkgs use floating promises. Eg, router.push, mutate (optimistic data)
    "@typescript-eslint/no-floating-promises": "off",

    // todo: validate api body reqs and turn on
    "@typescript-eslint/no-unsafe-argument": "off",
    // todo: fix errors and turn on
    "@typescript-eslint/no-unsafe-assignment": "off"
  }
}
